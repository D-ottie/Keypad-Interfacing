
Keypad_interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000028a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006e  00800060  0000028a  000002fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d09  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000743  00000000  00000000  00001161  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004fc  00000000  00000000  000018a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00001da0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e6  00000000  00000000  00001e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005a8  00000000  00000000  00002276  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000281e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e8       	ldi	r30, 0x8A	; 138
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3c       	cpi	r26, 0xCE	; 206
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 33 01 	call	0x266	; 0x266 <main>
  7a:	0c 94 43 01 	jmp	0x286	; 0x286 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_Cmd>:
	else if (row == 1 && pos<16){
		LCD_Cmd((pos & 0x0F)|0xC0);/* Command of second row and required
		position<16 */
	}
	LCD_String(str); /* Call LCD string function */
}
  82:	92 b3       	in	r25, 0x12	; 18
  84:	9f 70       	andi	r25, 0x0F	; 15
  86:	28 2f       	mov	r18, r24
  88:	20 7f       	andi	r18, 0xF0	; 240
  8a:	92 2b       	or	r25, r18
  8c:	92 bb       	out	0x12, r25	; 18
  8e:	90 98       	cbi	0x12, 0	; 18
  90:	91 9a       	sbi	0x12, 1	; 18
  92:	32 e0       	ldi	r19, 0x02	; 2
  94:	3a 95       	dec	r19
  96:	f1 f7       	brne	.-4      	; 0x94 <LCD_Cmd+0x12>
  98:	00 c0       	rjmp	.+0      	; 0x9a <LCD_Cmd+0x18>
  9a:	91 98       	cbi	0x12, 1	; 18
  9c:	ef e8       	ldi	r30, 0x8F	; 143
  9e:	f1 e0       	ldi	r31, 0x01	; 1
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <LCD_Cmd+0x1e>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <LCD_Cmd+0x24>
  a6:	00 00       	nop
  a8:	22 b3       	in	r18, 0x12	; 18
  aa:	2f 70       	andi	r18, 0x0F	; 15
  ac:	f0 e1       	ldi	r31, 0x10	; 16
  ae:	8f 9f       	mul	r24, r31
  b0:	c0 01       	movw	r24, r0
  b2:	11 24       	eor	r1, r1
  b4:	82 2b       	or	r24, r18
  b6:	82 bb       	out	0x12, r24	; 18
  b8:	91 9a       	sbi	0x12, 1	; 18
  ba:	32 e0       	ldi	r19, 0x02	; 2
  bc:	3a 95       	dec	r19
  be:	f1 f7       	brne	.-4      	; 0xbc <LCD_Cmd+0x3a>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <LCD_Cmd+0x40>
  c2:	91 98       	cbi	0x12, 1	; 18
  c4:	8f e9       	ldi	r24, 0x9F	; 159
  c6:	9f e0       	ldi	r25, 0x0F	; 15
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LCD_Cmd+0x46>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LCD_Cmd+0x4c>
  ce:	00 00       	nop
  d0:	08 95       	ret

000000d2 <LCD_Char>:
  d2:	92 b3       	in	r25, 0x12	; 18
  d4:	9f 70       	andi	r25, 0x0F	; 15
  d6:	28 2f       	mov	r18, r24
  d8:	20 7f       	andi	r18, 0xF0	; 240
  da:	92 2b       	or	r25, r18
  dc:	92 bb       	out	0x12, r25	; 18
  de:	90 9a       	sbi	0x12, 0	; 18
  e0:	91 9a       	sbi	0x12, 1	; 18
  e2:	32 e0       	ldi	r19, 0x02	; 2
  e4:	3a 95       	dec	r19
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_Char+0x12>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_Char+0x18>
  ea:	91 98       	cbi	0x12, 1	; 18
  ec:	ef e8       	ldi	r30, 0x8F	; 143
  ee:	f1 e0       	ldi	r31, 0x01	; 1
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <LCD_Char+0x1e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <LCD_Char+0x24>
  f6:	00 00       	nop
  f8:	22 b3       	in	r18, 0x12	; 18
  fa:	2f 70       	andi	r18, 0x0F	; 15
  fc:	f0 e1       	ldi	r31, 0x10	; 16
  fe:	8f 9f       	mul	r24, r31
 100:	c0 01       	movw	r24, r0
 102:	11 24       	eor	r1, r1
 104:	82 2b       	or	r24, r18
 106:	82 bb       	out	0x12, r24	; 18
 108:	91 9a       	sbi	0x12, 1	; 18
 10a:	32 e0       	ldi	r19, 0x02	; 2
 10c:	3a 95       	dec	r19
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_Char+0x3a>
 110:	00 c0       	rjmp	.+0      	; 0x112 <LCD_Char+0x40>
 112:	91 98       	cbi	0x12, 1	; 18
 114:	8f e9       	ldi	r24, 0x9F	; 159
 116:	9f e0       	ldi	r25, 0x0F	; 15
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <LCD_Char+0x46>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <LCD_Char+0x4c>
 11e:	00 00       	nop
 120:	08 95       	ret

00000122 <LCD_Init>:
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	81 bb       	out	0x11, r24	; 17
 126:	8f e3       	ldi	r24, 0x3F	; 63
 128:	9c e9       	ldi	r25, 0x9C	; 156
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCD_Init+0x8>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCD_Init+0xe>
 130:	00 00       	nop
 132:	83 e3       	ldi	r24, 0x33	; 51
 134:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
 138:	82 e3       	ldi	r24, 0x32	; 50
 13a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
 13e:	88 e2       	ldi	r24, 0x28	; 40
 140:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
 144:	8c e0       	ldi	r24, 0x0C	; 12
 146:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
 14a:	86 e0       	ldi	r24, 0x06	; 6
 14c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
 156:	8f e9       	ldi	r24, 0x9F	; 159
 158:	9f e0       	ldi	r25, 0x0F	; 15
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_Init+0x38>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_Init+0x3e>
 160:	00 00       	nop
 162:	80 e8       	ldi	r24, 0x80	; 128
 164:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
 168:	08 95       	ret

0000016a <LCD_Clear>:
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
 170:	8f e9       	ldi	r24, 0x9F	; 159
 172:	9f e0       	ldi	r25, 0x0F	; 15
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <LCD_Clear+0xa>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LCD_Clear+0x10>
 17a:	00 00       	nop
 17c:	80 e8       	ldi	r24, 0x80	; 128
 17e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
 182:	08 95       	ret

00000184 <LCD_String>:
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	ec 01       	movw	r28, r24
 18a:	88 81       	ld	r24, Y
 18c:	88 23       	and	r24, r24
 18e:	31 f0       	breq	.+12     	; 0x19c <LCD_String+0x18>
 190:	21 96       	adiw	r28, 0x01	; 1
 192:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_Char>
 196:	89 91       	ld	r24, Y+
 198:	81 11       	cpse	r24, r1
 19a:	fb cf       	rjmp	.-10     	; 0x192 <LCD_String+0xe>
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <ADC_Init>:

void ADC_Init()
{
	DDRA=0x0;			/* Make ADC port as input */
 1a2:	1a ba       	out	0x1a, r1	; 26
	ADCSRA = 0x87;			/* Enable ADC, fr/128  */
 1a4:	87 e8       	ldi	r24, 0x87	; 135
 1a6:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;			/* Vref: Avcc, ADC channel: 0 */
 1a8:	80 e4       	ldi	r24, 0x40	; 64
 1aa:	87 b9       	out	0x07, r24	; 7
 1ac:	08 95       	ret

000001ae <ADC_Read>:
	
}

int ADC_Read(char channel)
{
	ADMUX = 0x40 | (channel & 0x07);
 1ae:	87 70       	andi	r24, 0x07	; 7
 1b0:	80 64       	ori	r24, 0x40	; 64
 1b2:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);  /* Start ADC conversion */
 1b4:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA & (1<<ADIF))); /* Wait until end of conversion */
 1b6:	34 9b       	sbis	0x06, 4	; 6
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <ADC_Read+0x8>
	ADCSRA |= (1<<ADIF);  /* Clear interrupt flag */
 1ba:	34 9a       	sbi	0x06, 4	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1bc:	8f ec       	ldi	r24, 0xCF	; 207
 1be:	97 e0       	ldi	r25, 0x07	; 7
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <ADC_Read+0x12>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <ADC_Read+0x18>
 1c6:	00 00       	nop
	_delay_ms(1);   
	return ADCW;   /* Return ADC word */
 1c8:	84 b1       	in	r24, 0x04	; 4
 1ca:	95 b1       	in	r25, 0x05	; 5
}
 1cc:	08 95       	ret

000001ce <read_key>:

char read_key()
{
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62
 1d6:	c0 54       	subi	r28, 0x40	; 64
 1d8:	d1 09       	sbc	r29, r1
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	f8 94       	cli
 1de:	de bf       	out	0x3e, r29	; 62
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	cd bf       	out	0x3d, r28	; 61
	int keys = 16;
	//int keypad[] = {'7','8','9','/','4','5','6','*','1','2','3','-',' ','0','=','+'};
	unsigned char *keypad[] = {"7","8","9","/","4","5","6","*","1","2","3","-","ON","0","=","+"};
 1e4:	80 e2       	ldi	r24, 0x20	; 32
 1e6:	e0 e6       	ldi	r30, 0x60	; 96
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	de 01       	movw	r26, r28
 1ec:	11 96       	adiw	r26, 0x01	; 1
 1ee:	01 90       	ld	r0, Z+
 1f0:	0d 92       	st	X+, r0
 1f2:	8a 95       	dec	r24
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <read_key+0x20>
	int adc_value = ADC_Read(0);
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <ADC_Read>
	int values[] = {1023,512,341,256,180,153,133,118,98,90,83,76,68,64,60,57};
 1fc:	80 e2       	ldi	r24, 0x20	; 32
 1fe:	e0 e8       	ldi	r30, 0x80	; 128
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	de 01       	movw	r26, r28
 204:	91 96       	adiw	r26, 0x21	; 33
 206:	01 90       	ld	r0, Z+
 208:	0d 92       	st	X+, r0
 20a:	8a 95       	dec	r24
 20c:	e1 f7       	brne	.-8      	; 0x206 <read_key+0x38>
		
	while(1)
	{
		adc_value = ADC_Read(0);
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	0e 94 d7 00 	call	0x1ae	; 0x1ae <ADC_Read>
 214:	5c 01       	movw	r10, r24
 216:	8e 01       	movw	r16, r28
 218:	0f 5d       	subi	r16, 0xDF	; 223
 21a:	1f 4f       	sbci	r17, 0xFF	; 255
 21c:	ce 01       	movw	r24, r28
 21e:	01 96       	adiw	r24, 0x01	; 1
 220:	7c 01       	movw	r14, r24
 222:	68 01       	movw	r12, r16
 224:	92 e2       	ldi	r25, 0x22	; 34
 226:	c9 0e       	add	r12, r25
 228:	d1 1c       	adc	r13, r1
		
		for (int i =0; i<=keys; i++)
		{
			if (adc_value ==(values[i]))
 22a:	f8 01       	movw	r30, r16
 22c:	81 91       	ld	r24, Z+
 22e:	91 91       	ld	r25, Z+
 230:	8f 01       	movw	r16, r30
 232:	a8 16       	cp	r10, r24
 234:	b9 06       	cpc	r11, r25
 236:	39 f4       	brne	.+14     	; 0x246 <read_key+0x78>
			{
				LCD_Clear(); //Clear screen before displaying another key
 238:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_Clear>
				LCD_String(keypad[i]);
 23c:	f7 01       	movw	r30, r14
 23e:	80 81       	ld	r24, Z
 240:	91 81       	ldd	r25, Z+1	; 0x01
 242:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_String>
 246:	f2 e0       	ldi	r31, 0x02	; 2
 248:	ef 0e       	add	r14, r31
 24a:	f1 1c       	adc	r15, r1
		
	while(1)
	{
		adc_value = ADC_Read(0);
		
		for (int i =0; i<=keys; i++)
 24c:	0c 15       	cp	r16, r12
 24e:	1d 05       	cpc	r17, r13
 250:	61 f7       	brne	.-40     	; 0x22a <read_key+0x5c>
 252:	2f ef       	ldi	r18, 0xFF	; 255
 254:	82 e5       	ldi	r24, 0x52	; 82
 256:	97 e0       	ldi	r25, 0x07	; 7
 258:	21 50       	subi	r18, 0x01	; 1
 25a:	80 40       	sbci	r24, 0x00	; 0
 25c:	90 40       	sbci	r25, 0x00	; 0
 25e:	e1 f7       	brne	.-8      	; 0x258 <read_key+0x8a>
 260:	00 c0       	rjmp	.+0      	; 0x262 <read_key+0x94>
 262:	00 00       	nop
 264:	d4 cf       	rjmp	.-88     	; 0x20e <read_key+0x40>

00000266 <main>:
	int adc_value = 0;
	int keys = 16;
	//unsigned char *keypad[] = {"7","8","9","/","4","5","6","*","1","2","3","-","ON","0","=","+"};
	//int values[] = {1023,512,341,256,180,153,133,118,98,90,83,76,68,64,60,57};
	//char str[16];
	LCD_Init();  /* Initialize LCD */
 266:	0e 94 91 00 	call	0x122	; 0x122 <LCD_Init>
	ADC_Init();
 26a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <ADC_Init>
	LCD_String("Press A Key");
 26e:	81 ec       	ldi	r24, 0xC1	; 193
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_String>
	LCD_Cmd(0xc0);
 276:	80 ec       	ldi	r24, 0xC0	; 192
 278:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
	read_key();
 27c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <read_key>
		
		_delay_ms(300);
		
	}*/
	return 0;
}
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	08 95       	ret

00000286 <_exit>:
 286:	f8 94       	cli

00000288 <__stop_program>:
 288:	ff cf       	rjmp	.-2      	; 0x288 <__stop_program>
